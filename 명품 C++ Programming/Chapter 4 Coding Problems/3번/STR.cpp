#include "STR.h"

STR::STR() {
    this->str = "sample"; // 객체가 생성될 때 기본 문자열 "sample"을 str 멤버 변수에 설정합니다.
}

int STR::checkC(char c) {
    int cnt = 0; // 문자 c의 등장 횟수를 저장할 변수를 선언하고 초기화합니다.

    //=============================================================================
    // [방법 1] - 두개중 하나만 사용할 것
    // 문자열을 반복하여 각 문자가 문자 c와 같은지 확인합니다.
    for (int i = 0; i < str.length(); i++) { 
        if (str.at(i) == c) {
            // 만약 문자열의 i번째 문자가 문자 c와 같다면 cnt를 증가시킵니다.
            cnt++; 
        }
    }

    //=============================================================================
    // [방법 2] - 하나는 주석처리 하길 바랍니다.
    size_t pos = 0; // 검색을 시작할 인덱스를 나타내는 변수입니다.

    // 문자열에서 문자 c를 검색하고, 해당 문자가 발견되지 않을 때까지 반복합니다.
    while ((pos = str.find(c, pos)) != string::npos) { 
        cnt++; // 문자 c가 발견될 때마다 cnt를 증가시킵니다.
        pos++; // 다음 검색을 위해 검색 시작 인덱스를 증가시킵니다.
    }

    // string::npos npos는 보통 siz_et 타입의 최대값을 나타냄
    // string::npos는 std::string 클래스에서 사용되는 특별한 정적 상수입니다.
    // 이 값은 문자열에서 패턴을 찾지 못한 경우에 반환되는 특별한 값입니다.
    // 결론 : 끝까지 c의 단어를 발견하지 못하면 반복을 종료합니다.
    //=============================================================================

    cout << "문자 " << c << "는 " << cnt << "개 있습니다." << endl; // 문자 c의 등장 횟수를 출력합니다.
    return cnt; // 문자 c의 등장 횟수를 반환합니다.
}
